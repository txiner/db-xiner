#!/usr/bin/env python

import __builtin__
from hustle.core.marble import Marble


# Our completer is mostly copied from the rlcompleter module - it wasn't easy to subclass
def get_class_members(klass):
    ret = dir(klass)
    if hasattr(klass, '__bases__'):
        for base in klass.__bases__:
            ret = ret + get_class_members(base)
    return ret


class Completer(object):
    def __init__(self, namespace):
        self.namespace = namespace

    def complete(self, text, state):
        if state == 0:
            if "." in text:
                self.matches = self.attr_matches(text)
            else:
                self.matches = self.global_matches(text)
        try:
            return self.matches[state]
        except IndexError:
            return None

    def _callable_postfix(self, val, word):
        if hasattr(val, '__call__'):
            word = word + "("
        return word

    def global_matches(self, text):
        """Compute matches when text is a simple name.

        Return a list of all keywords, built-in functions and names currently
        defined in self.namespace that match.

        """
        import keyword
        hash = {}
        n = len(text)
        for word in keyword.kwlist:
            if word[:n] == text:
                hash[word] = 1
        for nspace in [__builtin__.__dict__, self.namespace]:
            for word, val in nspace.items():
                if word[:n] == text and word != "__builtins__":
                    hash[self._callable_postfix(val, word)] = 1
        matches = hash.keys()
        matches.sort()
        return matches

    def attr_matches(self, text):
        """Compute matches when text contains a dot.

        Assuming the text is of the form NAME.NAME....[NAME], and is
        evaluatable in self.namespace, it will be evaluated and its attributes
        (as revealed by dir()) are used as possible completions.  (For class
        instances, class members are also considered.)

        WARNING: this can still invoke arbitrary C code, if an object
        with a __getattr__ hook is evaluated.

        """
        import re
        m = re.match(r"(\w+(\.\w+)*)\.(\w*)", text)
        if not m:
            return []
        expr, attr = m.group(1, 3)
        try:
            thisobject = eval(expr, self.namespace)
        except Exception:
            return []

        if isinstance(thisobject, Marble):
            return self.table_matches(text)

        # get the content of the object, except __builtins__
        words = dir(thisobject)
        if "__builtins__" in words:
            words.remove("__builtins__")

        if hasattr(thisobject, '__class__'):
            words.append('__class__')
            words.extend(get_class_members(thisobject.__class__))
        hash = {}
        n = len(attr)
        for word in words:
            if word[:n] == attr and hasattr(thisobject, word):
                val = getattr(thisobject, word)
                word = self._callable_postfix(val, "%s.%s" % (expr, word))
                hash[word] = 1
        matches = hash.keys()
        matches.sort()
        return matches

    def table_matches(self, text):
        """Compute matches when text contains a dot.

        Assuming the text is of the form NAME.NAME....[NAME], and is
        evaluatable in self.namespace, it will be evaluated and its attributes
        (as revealed by dir()) are used as possible completions.  (For class
        instances, class members are also considered.)

        WARNING: this can still invoke arbitrary C code, if an object
        with a __getattr__ hook is evaluated.

        """
        import re
        m = re.match(r"(\w+(\.\w+)*)\.(\w*)", text)
        if not m:
            return []
        expr, attr = m.group(1, 3)
        try:
            thisobject = eval(expr, self.namespace)
        except Exception:
            return []

        # get the content of the object, except __builtins__
        words = [w for w in dir(thisobject) if not w.startswith('_')]
        if "__builtins__" in words:
            words.remove("__builtins__")

        if hasattr(thisobject, '__class__'):
            for stuff in get_class_members(thisobject.__class__):
                if stuff in words:
                    words.remove(stuff)
        hash = {}
        n = len(attr)
        for word in words:
            if word[:n] == attr and hasattr(thisobject, word):
                val = getattr(thisobject, word)
                word = self._callable_postfix(val, "%s.%s" % (expr, word))
                hash[word] = 1
        matches = hash.keys()
        matches.sort()
        return matches


if __name__ == '__main__':
    from argparse import ArgumentParser

    USAGE = "usage: hustle [OPTIONS]"

    parser = ArgumentParser(prog='hustle')

    parser.add_argument(
        "-s",
        "--settings-file",
        dest="settings_file",
        help="override settings",
    )

    parser.add_argument(
        "-d",
        "--no-dump",
        dest="dump",
        action="store_false",
        default=True,
        help="set auto-dump of results to OFF",
    )

    options = parser.parse_args()

    import code
    import readline
    import sys
    import os
    import atexit

    # modules we want in our imported namespace
    from hustle import Table, h_min, h_avg, h_max, h_sum, h_count, \
        select, select_nb, dump, edump, insert, star, tables, get_tables, \
        delete, drop, schema, partitions
    from ls import *
    from hustle.core.settings import Settings, overrides

    # make all tables visible as well
    foptions = vars(options)
    overrides['dump'] = options.dump
    settings = Settings(**foptions)
    ddfs = settings['ddfs']

    imported_objects = {
        "Table": Table,
        "h_min": h_min,
        "h_avg": h_avg,
        "h_max": h_max,
        "h_sum": h_sum,
        "h_count": h_count,
        "select": select,
        "select_nb": select_nb,
        "drop": drop,
        "delete": delete,
        "dump": dump,
        "edump": edump,
        "tables": tables,
        "schema": schema,
        "partitions": partitions,
        "star": star,
        "pretreatment": ls,
        "insert": insert,
        "_settings": settings,
    }

    def commands():
        print """
Type `help(<command>)` for more help:
  select()    - select rows and columns from a Table
  select_nb() - non-blocking version of select
  dump()      - dump the results of a non-nested select query
  edump()     - dump the resutls of a nested select query
  ---
  pretreatment() - pcap->.json
  Table.create() - create a new Table
  insert()    - insert data into a Table
  ---
  delete()    - delete data based on partition/table
  drop()      - delete all data including table definition
  ---
  tables()    - print currently available Hustle Tables
  schema()    - print the schema for a given table
  partitions()- print all active partitions for a given table
"""

    imported_objects['commands'] = commands

    print "Loading Hustle Tables from %s" % settings['server']
    for table in get_tables():
        print "   " + table
        imported_objects[table] = Table.from_tag(table)

    BANNER = """Welcome to Hustle!  Type `commands()` or `tables()` for some help, `exit()` to leave."""

    history_path = os.path.expanduser("~/.hustle_history")
    hsize = settings['history_size']
    readline.set_history_length(hsize)
    if os.path.exists(history_path):
        readline.read_history_file(history_path)

    def save_history(historyPath=history_path):
        readline.write_history_file(history_path)
    atexit.register(save_history)

    readline.set_completer(Completer(imported_objects).complete)
    if sys.platform == 'darwin' and 'libedit' in readline.__doc__:
        readline.parse_and_bind("bind ^I rl_complete")
    else:
        readline.parse_and_bind("tab: complete")

    code.interact(banner=BANNER, local=imported_objects)
